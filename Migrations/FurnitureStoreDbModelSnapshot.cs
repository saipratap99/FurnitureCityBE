// <auto-generated />
using System;
using FurnitureCityBE.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FurnitureCityBE.Migrations
{
    [DbContext(typeof(FurnitureStoreDb))]
    partial class FurnitureStoreDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("FurnitureCityBE.Models.Address", b =>
                {
                    b.Property<Guid>("address_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("aptNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("road")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("zipcode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("address_id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Category", b =>
                {
                    b.Property<Guid>("category_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("category_id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
<<<<<<< HEAD
                            category_id = new Guid("e06629eb-de6b-41e1-b4e9-01d6bac0a3c0"),
                            name = "Living Room"
                        },
                        new
                        {
                            category_id = new Guid("94d4fdb7-b1b7-4b42-aea4-08dc058baf26"),
                            name = "Bedroom"
                        },
                        new
                        {
                            category_id = new Guid("44a1f781-0906-45a0-888f-041790c7603f"),
                            name = "Office"
=======
                            Id = new Guid("e06629eb-de6b-41e1-b4e9-01d6bac0a3c0"),
                            Name = "Living Room"
                        },
                        new
                        {
                            Id = new Guid("94d4fdb7-b1b7-4b42-aea4-08dc058baf26"),
                            Name = "Bedroom"
                        },
                        new
                        {
                            Id = new Guid("44a1f781-0906-45a0-888f-041790c7603f"),
                            Name = "Office"
>>>>>>> main
                        });
                });

            modelBuilder.Entity("FurnitureCityBE.Models.CategorySubCategoryMapping", b =>
                {
                    b.Property<Guid>("sub_cat_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("category_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("subcategory_id")
                        .HasColumnType("char(36)");

                    b.HasKey("sub_cat_id");

                    b.HasIndex("category_id");

                    b.HasIndex("subcategory_id");

                    b.ToTable("CategorySubCategoryMappings");

                    b.HasData(
                        new
                        {
                            sub_cat_id = new Guid("563722c7-9ef0-47d8-a7d6-f03ab44187c8"),
                            category_id = new Guid("e06629eb-de6b-41e1-b4e9-01d6bac0a3c0"),
                            subcategory_id = new Guid("f106601e-296d-4c77-a7f3-522015498e3c")
                        },
                        new
                        {
                            sub_cat_id = new Guid("e6dca120-9826-4ed4-a8a5-4d41b5a41816"),
                            category_id = new Guid("94d4fdb7-b1b7-4b42-aea4-08dc058baf26"),
                            subcategory_id = new Guid("f106601e-296d-4c77-a7f3-522015498e3c")
                        },
                        new
                        {
                            sub_cat_id = new Guid("40cff688-e8b2-43e3-9b6a-958c8df73a12"),
                            category_id = new Guid("44a1f781-0906-45a0-888f-041790c7603f"),
                            subcategory_id = new Guid("f106601e-296d-4c77-a7f3-522015498e3c")
                        },
                        new
                        {
                            sub_cat_id = new Guid("22887437-d5f0-48e4-94d7-215c2bde5654"),
                            category_id = new Guid("94d4fdb7-b1b7-4b42-aea4-08dc058baf26"),
                            subcategory_id = new Guid("91cc1981-42f6-4176-854b-c06a6f12fd31")
                        },
                        new
                        {
                            sub_cat_id = new Guid("e9baa0ef-578b-46d4-9809-b2a9515033f4"),
                            category_id = new Guid("44a1f781-0906-45a0-888f-041790c7603f"),
                            subcategory_id = new Guid("91cc1981-42f6-4176-854b-c06a6f12fd31")
                        },
                        new
                        {
                            sub_cat_id = new Guid("9dc3a5d3-0266-4485-ab65-9c55d95e1125"),
                            category_id = new Guid("94d4fdb7-b1b7-4b42-aea4-08dc058baf26"),
                            subcategory_id = new Guid("836856cc-e6bc-4acd-9dcb-eb18da4f2b10")
                        });
                });

            modelBuilder.Entity("FurnitureCityBE.Models.ContactUs", b =>
                {
                    b.Property<Guid>("contact_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("contact_id");

                    b.HasIndex("user_id");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Invoice", b =>
                {
                    b.Property<Guid>("invoice_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("order_id")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("totalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("invoice_id");

                    b.HasIndex("order_id")
                        .IsUnique();

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Lead", b =>
                {
                    b.Property<Guid>("leads_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("contact_id")
                        .HasColumnType("char(36)");

                    b.Property<string>("leadStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("nextEnquiryDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("leads_id");

                    b.HasIndex("contact_id");

                    b.ToTable("Leads");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.LeadHistory", b =>
                {
                    b.Property<Guid>("lead_history_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("leads_id")
                        .HasColumnType("char(36)");

                    b.HasKey("lead_history_id");

                    b.HasIndex("leads_id");

                    b.ToTable("LeadHistories");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Order", b =>
                {
                    b.Property<Guid>("order_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("deliveryMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("orderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("orderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid?>("user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("order_id");

                    b.HasIndex("user_id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.OrderItem", b =>
                {
                    b.Property<Guid>("order_item_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("order_id")
                        .HasColumnType("char(36)");

<<<<<<< HEAD
                    b.Property<Guid>("product_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("quantity")
=======
                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Quantity")
>>>>>>> main
                        .HasColumnType("int");

                    b.HasKey("order_item_id");

                    b.HasIndex("order_id");

                    b.HasIndex("product_id");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Product", b =>
                {
                    b.Property<Guid>("product_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("isActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("retailer_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("subcategory_id")
                        .HasColumnType("char(36)");

                    b.HasKey("product_id");

                    b.HasIndex("retailer_id");

                    b.HasIndex("subcategory_id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            product_id = new Guid("9db1be38-b7d4-4158-ac8b-63a34ba72086"),
                            description = "A stylish modern sofa for your living room.",
                            isActive = true,
                            name = "Modern Sofa",
                            price = 599.99m,
                            quantity = 10,
                            retailer_id = new Guid("00000000-0000-0000-0000-000000000000"),
                            subcategory_id = new Guid("f106601e-296d-4c77-a7f3-522015498e3c")
                        },
                        new
                        {
                            product_id = new Guid("bc5d166e-6adb-4552-981d-ff823d9d924c"),
                            description = "A spacious and comfortable king-size bed.",
                            isActive = true,
                            name = "King Size Bed",
                            price = 799.99m,
                            quantity = 5,
                            retailer_id = new Guid("00000000-0000-0000-0000-000000000000"),
                            subcategory_id = new Guid("836856cc-e6bc-4acd-9dcb-eb18da4f2b10")
                        },
                        new
                        {
                            product_id = new Guid("402dd236-ed31-48a2-ab7f-59094a84a1b7"),
                            description = "A height-adjustable ergonomic desk for your office.",
                            isActive = true,
                            name = "Ergonomic Office Desk",
                            price = 299.99m,
                            quantity = 8,
                            retailer_id = new Guid("00000000-0000-0000-0000-000000000000"),
                            subcategory_id = new Guid("91cc1981-42f6-4176-854b-c06a6f12fd31")
                        },
                        new
                        {
                            product_id = new Guid("10b77aaa-9049-4b93-999c-489702d4383e"),
                            description = "A sleek leather sofa that adds sophistication to any living room.",
                            isActive = true,
                            name = "Modern Leather Sofa",
                            price = 799.99m,
                            quantity = 15,
                            retailer_id = new Guid("00000000-0000-0000-0000-000000000000"),
                            subcategory_id = new Guid("f106601e-296d-4c77-a7f3-522015498e3c")
                        },
                        new
                        {
                            product_id = new Guid("c3bfe301-8dd5-4b71-a305-f7bd331cef33"),
                            description = "A spacious and comfortable sectional sofa perfect for family gatherings.",
                            isActive = true,
                            name = "Sectional Fabric Sofa",
                            price = 899.99m,
                            quantity = 10,
                            retailer_id = new Guid("00000000-0000-0000-0000-000000000000"),
                            subcategory_id = new Guid("f106601e-296d-4c77-a7f3-522015498e3c")
                        },
                        new
                        {
                            product_id = new Guid("7c874e54-8389-4fae-b103-66d60998313b"),
                            description = "A multi-functional sofa bed with a contemporary design.",
                            isActive = true,
                            name = "Convertible Sofa Bed",
                            price = 499.99m,
                            quantity = 8,
                            retailer_id = new Guid("00000000-0000-0000-0000-000000000000"),
                            subcategory_id = new Guid("f106601e-296d-4c77-a7f3-522015498e3c")
                        },
                        new
                        {
                            product_id = new Guid("0eaf08db-7561-4a34-8339-cf7a37ec7263"),
                            description = "A solid wooden bed frame with a classic finish.",
                            isActive = true,
                            name = "Queen Size Wooden Bed",
                            price = 699.99m,
                            quantity = 20,
                            retailer_id = new Guid("00000000-0000-0000-0000-000000000000"),
                            subcategory_id = new Guid("836856cc-e6bc-4acd-9dcb-eb18da4f2b10")
                        },
                        new
                        {
                            product_id = new Guid("dd83ca61-f6d4-4a1b-90dd-b4455424fc18"),
                            description = "A luxurious bed with a tufted headboard and sturdy build.",
                            isActive = true,
                            name = "King Size Upholstered Bed",
                            price = 999.99m,
                            quantity = 10,
                            retailer_id = new Guid("00000000-0000-0000-0000-000000000000"),
                            subcategory_id = new Guid("836856cc-e6bc-4acd-9dcb-eb18da4f2b10")
                        },
                        new
                        {
                            product_id = new Guid("477eb6cf-b316-4320-b2e4-ee9f9bf5514f"),
                            description = "Perfect for kids, this bunk bed includes under-bed storage drawers.",
                            isActive = true,
                            name = "Bunk Bed with Storage",
                            price = 799.99m,
                            quantity = 5,
                            retailer_id = new Guid("00000000-0000-0000-0000-000000000000"),
                            subcategory_id = new Guid("836856cc-e6bc-4acd-9dcb-eb18da4f2b10")
                        },
                        new
                        {
                            product_id = new Guid("b5027170-1409-4149-8355-1bd473263dad"),
                            description = "A height-adjustable desk designed for ergonomic office setups.",
                            isActive = true,
                            name = "Adjustable Standing Desk",
                            price = 399.99m,
                            quantity = 12,
                            retailer_id = new Guid("00000000-0000-0000-0000-000000000000"),
                            subcategory_id = new Guid("91cc1981-42f6-4176-854b-c06a6f12fd31")
                        },
                        new
                        {
                            product_id = new Guid("652be6fb-3491-46b9-b13d-cab1636c2904"),
                            description = "A spacious executive desk with a rich mahogany finish.",
                            isActive = true,
                            name = "Executive Wooden Desk",
                            price = 899.99m,
                            quantity = 7,
                            retailer_id = new Guid("00000000-0000-0000-0000-000000000000"),
                            subcategory_id = new Guid("91cc1981-42f6-4176-854b-c06a6f12fd31")
                        },
                        new
                        {
                            product_id = new Guid("87baad24-b19f-47ba-a811-41f933c8c8ae"),
                            description = "A minimalist computer desk with a sleek design.",
                            isActive = true,
                            name = "Compact Computer Desk",
                            price = 199.99m,
                            quantity = 20,
                            retailer_id = new Guid("00000000-0000-0000-0000-000000000000"),
                            subcategory_id = new Guid("91cc1981-42f6-4176-854b-c06a6f12fd31")
                        });
                });

            modelBuilder.Entity("FurnitureCityBE.Models.ProductImage", b =>
                {
                    b.Property<Guid>("p_image_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("altText")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("imageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("product_id")
                        .HasColumnType("char(36)");

                    b.HasKey("p_image_id");

                    b.HasIndex("product_id");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.ProductReview", b =>
                {
                    b.Property<Guid>("review_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("product_id")
                        .HasColumnType("char(36)");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("review_id");

                    b.HasIndex("product_id");

                    b.HasIndex("user_id");

                    b.ToTable("ProductReviews");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.ProductTag", b =>
                {
                    b.Property<Guid>("product_tag_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("retailer_id")
                        .HasColumnType("char(36)");

                    b.HasKey("product_tag_id");

                    b.HasIndex("retailer_id");

                    b.ToTable("ProductTags");

                    b.HasData(
                        new
                        {
<<<<<<< HEAD
                            product_tag_id = new Guid("03d18622-5b29-4e67-b38f-4689596c0b4d"),
                            name = "Modern",
                            retailer_id = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            product_tag_id = new Guid("dae98516-53af-44b8-bb8e-3b72d2599fa4"),
                            name = "Luxury",
                            retailer_id = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            product_tag_id = new Guid("d388b291-3104-4766-a595-d018a265f18b"),
                            name = "Ergonomic",
                            retailer_id = new Guid("00000000-0000-0000-0000-000000000000")
=======
                            Id = new Guid("dc323bcf-4a3a-4c36-9919-2fd0cb5b4766"),
                            Name = "Modern"
                        },
                        new
                        {
                            Id = new Guid("fbc54077-f6d0-4e07-9974-cfbd51a9349f"),
                            Name = "Luxury"
                        },
                        new
                        {
                            Id = new Guid("32a5340c-5189-4e3d-88f5-f69d876287b9"),
                            Name = "Ergonomic"
>>>>>>> main
                        });
                });

            modelBuilder.Entity("FurnitureCityBE.Models.ProductTagsMapping", b =>
                {
                    b.Property<Guid>("prod_prodTag_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("product_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("product_tag_id")
                        .HasColumnType("char(36)");

                    b.HasKey("prod_prodTag_id");

                    b.HasIndex("product_id");

                    b.HasIndex("product_tag_id");

                    b.ToTable("ProductTagsMappings");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Retailer", b =>
                {
                    b.Property<Guid>("retailer_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("contact_information")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("retailer_id");

                    b.ToTable("Retailer");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.SavedAddress", b =>
                {
                    b.Property<Guid>("saved_address_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("address_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("saved_address_id");

                    b.HasIndex("address_id");

                    b.HasIndex("user_id");

                    b.ToTable("SavedAddresses");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.ShipmentStatus", b =>
                {
                    b.Property<Guid>("shipment_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("address_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("order_id")
                        .HasColumnType("char(36)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("shipment_id");

                    b.HasIndex("address_id");

                    b.HasIndex("order_id");

                    b.ToTable("ShipmentStatuses");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.StoreLocation", b =>
                {
                    b.Property<Guid>("store_location_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("address_id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("storeStartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("store_location_id");

                    b.HasIndex("address_id");

                    b.ToTable("StoreLocations");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.SubCategory", b =>
                {
                    b.Property<Guid>("subcategory_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("subcategory_id");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
<<<<<<< HEAD
                            subcategory_id = new Guid("f106601e-296d-4c77-a7f3-522015498e3c"),
                            name = "Sofas"
                        },
                        new
                        {
                            subcategory_id = new Guid("836856cc-e6bc-4acd-9dcb-eb18da4f2b10"),
                            name = "Beds"
                        },
                        new
                        {
                            subcategory_id = new Guid("91cc1981-42f6-4176-854b-c06a6f12fd31"),
                            name = "Desks"
=======
                            Id = new Guid("f106601e-296d-4c77-a7f3-522015498e3c"),
                            Name = "Sofas"
                        },
                        new
                        {
                            Id = new Guid("836856cc-e6bc-4acd-9dcb-eb18da4f2b10"),
                            Name = "Beds"
                        },
                        new
                        {
                            Id = new Guid("91cc1981-42f6-4176-854b-c06a6f12fd31"),
                            Name = "Desks"
>>>>>>> main
                        });
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Testimonial", b =>
                {
                    b.Property<Guid>("testimonial_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("company")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("testimonialText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.HasKey("testimonial_id");

                    b.HasIndex("user_id");

                    b.ToTable("Testimonials");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.User", b =>
                {
                    b.Property<Guid>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("mobile")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("user_id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf7cc03c-172f-4b11-882d-e463796a1a40"),
                            Email = "test@test.com",
                            Mobile = "234565432",
                            Name = "test",
                            Password = "test",
                            Role = "USER"
                        });
                });

            modelBuilder.Entity("FurnitureCityBE.Models.CategorySubCategoryMapping", b =>
                {
                    b.HasOne("FurnitureCityBE.Models.Category", "Category")
                        .WithMany("CategorySubCategoryMappings")
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FurnitureCityBE.Models.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("subcategory_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.ContactUs", b =>
                {
                    b.HasOne("FurnitureCityBE.Models.Order", "User")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Invoice", b =>
                {
                    b.HasOne("FurnitureCityBE.Models.Order", "Order")
                        .WithOne("Invoice")
                        .HasForeignKey("FurnitureCityBE.Models.Invoice", "order_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Lead", b =>
                {
                    b.HasOne("FurnitureCityBE.Models.ContactUs", "ContactUs")
                        .WithMany()
                        .HasForeignKey("contact_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactUs");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.LeadHistory", b =>
                {
                    b.HasOne("FurnitureCityBE.Models.Lead", "Lead")
                        .WithMany("LeadHistories")
                        .HasForeignKey("leads_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Order", b =>
                {
                    b.HasOne("FurnitureCityBE.Models.User", null)
                        .WithMany("Orders")
                        .HasForeignKey("user_id");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.OrderItem", b =>
                {
                    b.HasOne("FurnitureCityBE.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("order_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FurnitureCityBE.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FurnitureCityBE.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Product", b =>
                {
                    b.HasOne("FurnitureCityBE.Models.Retailer", "Retailer")
                        .WithMany()
                        .HasForeignKey("retailer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FurnitureCityBE.Models.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("subcategory_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Retailer");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.ProductImage", b =>
                {
                    b.HasOne("FurnitureCityBE.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.ProductReview", b =>
                {
                    b.HasOne("FurnitureCityBE.Models.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FurnitureCityBE.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.ProductTag", b =>
                {
                    b.HasOne("FurnitureCityBE.Models.Retailer", "Retailer")
                        .WithMany()
                        .HasForeignKey("retailer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Retailer");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.ProductTagsMapping", b =>
                {
                    b.HasOne("FurnitureCityBE.Models.Product", "Product")
                        .WithMany("ProductTagsMappings")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FurnitureCityBE.Models.ProductTag", "ProductTag")
                        .WithMany()
                        .HasForeignKey("product_tag_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductTag");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.SavedAddress", b =>
                {
                    b.HasOne("FurnitureCityBE.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("address_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FurnitureCityBE.Models.User", "User")
                        .WithMany("SavedAddresses")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.ShipmentStatus", b =>
                {
                    b.HasOne("FurnitureCityBE.Models.Order", "Address")
                        .WithMany()
                        .HasForeignKey("address_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FurnitureCityBE.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("order_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.StoreLocation", b =>
                {
                    b.HasOne("FurnitureCityBE.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("address_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Testimonial", b =>
                {
                    b.HasOne("FurnitureCityBE.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Category", b =>
                {
                    b.Navigation("CategorySubCategoryMappings");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Lead", b =>
                {
                    b.Navigation("LeadHistories");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Order", b =>
                {
                    b.Navigation("Invoice")
                        .IsRequired();

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Product", b =>
                {
                    b.Navigation("ProductImages");

                    b.Navigation("ProductReviews");

                    b.Navigation("ProductTagsMappings");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("SavedAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
