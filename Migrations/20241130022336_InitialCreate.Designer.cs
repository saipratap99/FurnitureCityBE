// <auto-generated />
using System;
using FurnitureCityBE.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FurnitureCityBE.Migrations
{
    [DbContext(typeof(FurnitureStoreDb))]
    [Migration("20241130022336_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("FurnitureCityBE.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AppartmentNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Road")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e06629eb-de6b-41e1-b4e9-01d6bac0a3c0"),
                            Name = "Living Room"
                        },
                        new
                        {
                            Id = new Guid("94d4fdb7-b1b7-4b42-aea4-08dc058baf26"),
                            Name = "Bedroom"
                        },
                        new
                        {
                            Id = new Guid("44a1f781-0906-45a0-888f-041790c7603f"),
                            Name = "Office"
                        });
                });

            modelBuilder.Entity("FurnitureCityBE.Models.CategorySubCategoryMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("CategorySubCategoryMappings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("517f0459-1a82-45e3-8081-b759d1d48d21"),
                            CategoryId = new Guid("e06629eb-de6b-41e1-b4e9-01d6bac0a3c0"),
                            SubCategoryId = new Guid("f106601e-296d-4c77-a7f3-522015498e3c")
                        },
                        new
                        {
                            Id = new Guid("a15376b5-dc61-422c-9317-d0b69e719569"),
                            CategoryId = new Guid("836856cc-e6bc-4acd-9dcb-eb18da4f2b10"),
                            SubCategoryId = new Guid("f106601e-296d-4c77-a7f3-522015498e3c")
                        },
                        new
                        {
                            Id = new Guid("b92fde30-b3f4-40ff-a4da-49a3cd0dcd91"),
                            CategoryId = new Guid("44a1f781-0906-45a0-888f-041790c7603f"),
                            SubCategoryId = new Guid("f106601e-296d-4c77-a7f3-522015498e3c")
                        },
                        new
                        {
                            Id = new Guid("6ea2bf9b-b619-4de9-b162-2b65d4a15d12"),
                            CategoryId = new Guid("836856cc-e6bc-4acd-9dcb-eb18da4f2b10"),
                            SubCategoryId = new Guid("91cc1981-42f6-4176-854b-c06a6f12fd31")
                        },
                        new
                        {
                            Id = new Guid("d68a2856-4f82-4a2a-8b74-4d5fdd5d3187"),
                            CategoryId = new Guid("44a1f781-0906-45a0-888f-041790c7603f"),
                            SubCategoryId = new Guid("91cc1981-42f6-4176-854b-c06a6f12fd31")
                        },
                        new
                        {
                            Id = new Guid("a124cd66-0db9-4f24-a6e3-89d5c7c07211"),
                            CategoryId = new Guid("94d4fdb7-b1b7-4b42-aea4-08dc058baf26"),
                            SubCategoryId = new Guid("836856cc-e6bc-4acd-9dcb-eb18da4f2b10")
                        });
                });

            modelBuilder.Entity("FurnitureCityBE.Models.ContactUs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Lead", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ContactUsId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("LeadStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LeadStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("NextEnquiryDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ContactUsId");

                    b.ToTable("Leads");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.LeadHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("LeadId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.ToTable("LeadHistories");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("972f1963-e72b-4614-b0ba-237a16c21161"),
                            Description = "A stylish modern sofa for your living room.",
                            IsActive = true,
                            Name = "Modern Sofa",
                            Price = 599.99m,
                            Quantity = 10,
                            SubCategoryId = new Guid("f106601e-296d-4c77-a7f3-522015498e3c")
                        },
                        new
                        {
                            Id = new Guid("b86211f6-b630-4d59-8985-af355f118fec"),
                            Description = "A spacious and comfortable king-size bed.",
                            IsActive = true,
                            Name = "King Size Bed",
                            Price = 799.99m,
                            Quantity = 5,
                            SubCategoryId = new Guid("836856cc-e6bc-4acd-9dcb-eb18da4f2b10")
                        },
                        new
                        {
                            Id = new Guid("1435a859-24e6-4def-a1a9-f4f0ae3e26fc"),
                            Description = "A height-adjustable ergonomic desk for your office.",
                            IsActive = true,
                            Name = "Ergonomic Office Desk",
                            Price = 299.99m,
                            Quantity = 8,
                            SubCategoryId = new Guid("91cc1981-42f6-4176-854b-c06a6f12fd31")
                        },
                        new
                        {
                            Id = new Guid("3b94a910-ea37-48ea-93b6-5e937360e9fc"),
                            Description = "A sleek leather sofa that adds sophistication to any living room.",
                            IsActive = true,
                            Name = "Modern Leather Sofa",
                            Price = 799.99m,
                            Quantity = 15,
                            SubCategoryId = new Guid("f106601e-296d-4c77-a7f3-522015498e3c")
                        },
                        new
                        {
                            Id = new Guid("229447be-26b1-4a27-bb41-0c1486a9ea1d"),
                            Description = "A spacious and comfortable sectional sofa perfect for family gatherings.",
                            IsActive = true,
                            Name = "Sectional Fabric Sofa",
                            Price = 899.99m,
                            Quantity = 10,
                            SubCategoryId = new Guid("f106601e-296d-4c77-a7f3-522015498e3c")
                        },
                        new
                        {
                            Id = new Guid("512127a0-4501-4b21-af06-0f390183eade"),
                            Description = "A multi-functional sofa bed with a contemporary design.",
                            IsActive = true,
                            Name = "Convertible Sofa Bed",
                            Price = 499.99m,
                            Quantity = 8,
                            SubCategoryId = new Guid("f106601e-296d-4c77-a7f3-522015498e3c")
                        },
                        new
                        {
                            Id = new Guid("8a7dc4f1-0cd7-4656-ab2b-5f16c02e79dc"),
                            Description = "A solid wooden bed frame with a classic finish.",
                            IsActive = true,
                            Name = "Queen Size Wooden Bed",
                            Price = 699.99m,
                            Quantity = 20,
                            SubCategoryId = new Guid("836856cc-e6bc-4acd-9dcb-eb18da4f2b10")
                        },
                        new
                        {
                            Id = new Guid("b04c2804-d56b-4ae8-b5df-560d3eb1d587"),
                            Description = "A luxurious bed with a tufted headboard and sturdy build.",
                            IsActive = true,
                            Name = "King Size Upholstered Bed",
                            Price = 999.99m,
                            Quantity = 10,
                            SubCategoryId = new Guid("836856cc-e6bc-4acd-9dcb-eb18da4f2b10")
                        },
                        new
                        {
                            Id = new Guid("25b2463a-66f1-4ad7-aab4-b76ed06d0010"),
                            Description = "Perfect for kids, this bunk bed includes under-bed storage drawers.",
                            IsActive = true,
                            Name = "Bunk Bed with Storage",
                            Price = 799.99m,
                            Quantity = 5,
                            SubCategoryId = new Guid("836856cc-e6bc-4acd-9dcb-eb18da4f2b10")
                        },
                        new
                        {
                            Id = new Guid("b05f69f3-6a0d-45de-9df4-254636f13161"),
                            Description = "A height-adjustable desk designed for ergonomic office setups.",
                            IsActive = true,
                            Name = "Adjustable Standing Desk",
                            Price = 399.99m,
                            Quantity = 12,
                            SubCategoryId = new Guid("91cc1981-42f6-4176-854b-c06a6f12fd31")
                        },
                        new
                        {
                            Id = new Guid("0970b6bd-8ac1-4d61-93d6-b58439b49892"),
                            Description = "A spacious executive desk with a rich mahogany finish.",
                            IsActive = true,
                            Name = "Executive Wooden Desk",
                            Price = 899.99m,
                            Quantity = 7,
                            SubCategoryId = new Guid("91cc1981-42f6-4176-854b-c06a6f12fd31")
                        },
                        new
                        {
                            Id = new Guid("6075317b-3e06-4210-a0e0-78dd50ff9e60"),
                            Description = "A minimalist computer desk with a sleek design.",
                            IsActive = true,
                            Name = "Compact Computer Desk",
                            Price = 199.99m,
                            Quantity = 20,
                            SubCategoryId = new Guid("91cc1981-42f6-4176-854b-c06a6f12fd31")
                        });
                });

            modelBuilder.Entity("FurnitureCityBE.Models.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AltText")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.ProductReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ProductReviews");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.ProductTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProductTags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c318fb93-4a9c-4548-ae4a-b84fea9c848a"),
                            Name = "Modern"
                        },
                        new
                        {
                            Id = new Guid("f9fdba4d-7b4a-4e0f-b878-c35dbff9d0c4"),
                            Name = "Luxury"
                        },
                        new
                        {
                            Id = new Guid("06a2a48e-7b25-4f81-a16c-673a8568d133"),
                            Name = "Ergonomic"
                        });
                });

            modelBuilder.Entity("FurnitureCityBE.Models.ProductTagsMapping", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProductTagId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductTagId");

                    b.ToTable("ProductTagsMappings");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.SavedAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("SavedAddresses");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.ShipmentStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("ShipmentStatuses");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.StoreLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StoreStartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("StoreLocations");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f106601e-296d-4c77-a7f3-522015498e3c"),
                            Name = "Sofas"
                        },
                        new
                        {
                            Id = new Guid("94d4fdb7-b1b7-4b42-aea4-08dc058baf26"),
                            Name = "Bedroom"
                        },
                        new
                        {
                            Id = new Guid("91cc1981-42f6-4176-854b-c06a6f12fd31"),
                            Name = "Desks"
                        });
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Testimonial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TestimonialText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Testimonials");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.CategorySubCategoryMapping", b =>
                {
                    b.HasOne("FurnitureCityBE.Models.Category", "Category")
                        .WithMany("CategorySubCategoryMappings")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FurnitureCityBE.Models.SubCategory", "SubCategory")
                        .WithMany("CategorySubCategoryMappings")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Invoice", b =>
                {
                    b.HasOne("FurnitureCityBE.Models.Order", "Order")
                        .WithOne("Invoice")
                        .HasForeignKey("FurnitureCityBE.Models.Invoice", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Lead", b =>
                {
                    b.HasOne("FurnitureCityBE.Models.ContactUs", "ContactUs")
                        .WithMany()
                        .HasForeignKey("ContactUsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactUs");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.LeadHistory", b =>
                {
                    b.HasOne("FurnitureCityBE.Models.Lead", "Lead")
                        .WithMany("LeadHistories")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lead");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Order", b =>
                {
                    b.HasOne("FurnitureCityBE.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.OrderItem", b =>
                {
                    b.HasOne("FurnitureCityBE.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Product", b =>
                {
                    b.HasOne("FurnitureCityBE.Models.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.ProductImage", b =>
                {
                    b.HasOne("FurnitureCityBE.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.ProductReview", b =>
                {
                    b.HasOne("FurnitureCityBE.Models.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FurnitureCityBE.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.ProductTagsMapping", b =>
                {
                    b.HasOne("FurnitureCityBE.Models.Product", "Product")
                        .WithMany("ProductTagsMappings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FurnitureCityBE.Models.ProductTag", "ProductTag")
                        .WithMany()
                        .HasForeignKey("ProductTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductTag");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.SavedAddress", b =>
                {
                    b.HasOne("FurnitureCityBE.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FurnitureCityBE.Models.User", "User")
                        .WithMany("SavedAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.ShipmentStatus", b =>
                {
                    b.HasOne("FurnitureCityBE.Models.Order", "Order")
                        .WithMany("ShipmentStatuses")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.StoreLocation", b =>
                {
                    b.HasOne("FurnitureCityBE.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Category", b =>
                {
                    b.Navigation("CategorySubCategoryMappings");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Lead", b =>
                {
                    b.Navigation("LeadHistories");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Order", b =>
                {
                    b.Navigation("Invoice")
                        .IsRequired();

                    b.Navigation("OrderItems");

                    b.Navigation("ShipmentStatuses");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.Product", b =>
                {
                    b.Navigation("ProductImages");

                    b.Navigation("ProductReviews");

                    b.Navigation("ProductTagsMappings");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.SubCategory", b =>
                {
                    b.Navigation("CategorySubCategoryMappings");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("FurnitureCityBE.Models.User", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("SavedAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
